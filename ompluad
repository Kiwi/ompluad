#!/usr/bin/lua
local socket = require ("socket")
local http = require "socket.http"
local ltn12 = require "ltn12"

Omp = {
    verbose = true,
    options = {},
    files = {},
    file = "",
    stdin = "",
    maxsize = 2^30,
    tmpfilename = "/tmp/ompluad.tmp",
}

local function getOptions(options)
    local function resetFlags()
        for k in pairs(options) do
            options[k].on = false
        end
    end

    local cur_opt, required_opt

    for i = 1, #arg do
        if string.match(arg[i], "^%-%-") then
            s = string.gsub(arg[i], "^%-%-", "")
            if options[s] and #s > 1 then
                options[s].on = true
                cur_opt = s
                required_opt = options[s].required
            else
                print("--"..s.." is an invalid option")
                resetFlags()
            end

        elseif string.match(arg[i], "^%-%a+") then
            for j = 1, #arg[i]-1 do
                s = string.sub(arg[i], j+1, j+1)
                if options[s] then
                    options[s].on = true
                    cur_opt = s
                    required_opt = options[s].required
                else
                    print("-"..s.." is an invalid option")
                    resetFlags()
                end
            end

        elseif cur_opt then
            if required_opt then
                table.insert(options[cur_opt].params, arg[i])
                cur_opt = nil
                required_opt = false
            else
                table.insert(Omp.files, arg[i])
            end
        else
            table.insert(Omp.files, arg[i])
        end
    end
end

local function setOptions(tbl)
    for k in pairs(tbl.options) do
        if tbl.options[k].on == true then
            tbl.options[k].func(tbl, tbl.options[k].params)
        end
    end
end

local function addOption(tbl, required_opt, option_name, func_name, secondary_name)
    tbl.options[option_name] = {on = false, params = {}, func = func_name, required = required_opt}

    if secondary_name and secondary_name ~= option_name then
        tbl.options[secondary_name] = {on = false, params = tbl.options[option_name].params, func = func_name, required = required_opt}
    end
end

local function cleanup(tbl)
    os.remove(tbl.tmpfilename)
end

local function post(tbl, filename)
    local boundary = "##ThIs_iS_ThE_BoUnDaRy##"

    local bb = {
        '--'..boundary,
        string.format('Content-Disposition: form-data; name="file1"; filename="%s"', tbl.file),
        'Content-Type: application/octet-stream',
        '',
        '',
    }

    local be = {
        '',
        '--'..boundary..'--',
        ''
    }

    bb = table.concat(bb, "\r\n")
    be = table.concat(be, "\r\n")

    local file = assert(io.open(filename, "rb"))
    local size = file:seek("end")

    if size > tbl.maxsize then
        print("Error ompluading " .. tbl.file .. ": file exceeds " .. tbl.maxsize / 2^20 .. " megabytes (size was " .. string.format("%.2f", tonumber(size / 2^20)) .. " megabytes)")
        cleanup(tbl)
        os.exit()
    end

    file:seek("set")

    local head = {
        ["content-type"] = string.format('multipart/form-data; boundary=%s', boundary);
        ["content-length"] = tostring(size + #bb + #be);
        ["accept"] = "text/xml";
    }

    local http_source = ltn12.source.cat(
        ltn12.source.string(bb),
        ltn12.source.file(file),
        ltn12.source.string(be))

    local response, sent = {}, 0

    local function progress()
        local data = http_source()
        if tbl.verbose then
            sent = sent + #(data or "")
            local progress = sent / (size + #bb + #be) * 100;
            local hashes = string.rep("#", progress/2)
            local endpipe = string.rep(" ", 50 - #hashes ).."|"
            io.write(string.format("Uploading %s: %d%%\n%s%s\27[1A\r", tbl.file, progress, hashes, endpipe))
        end

        return data
    end

    local r, e = http.request {
        method = "POST";
        url = "http://omploader.org/upload";
        headers = head;
        source = progress;
        sink = ltn12.sink.table(response);
    }

    if not r then
        return nil,tostring(e)
    end

    response = table.concat(response)

    local err = response:match('<err%s+type="(.*)"/>')

    if err then
        return nil, err
    end

    local url = response:match('View file: <a href="%w*">(http://omploader.org/%w*)</a>')

    return url
end

local function help(tbl)
    print([=[
Usage: ompluad [-h|--help] [options] [file(s)]
    -u, --url       Only output URL when finished
    -f, --filename  Filename to use when posting data
                    from stdin

    You can supply a list of files OR data via stdin
]=])

    cleanup(tbl)
    os.exit()
end

local function urlonly(tbl)
    tbl.verbose = false
end

local function stdindescrip(tbl, params)
    if params[1] then
        tbl.stdin = params[1]
    else
        print("Usage: ompluad -f DESCRIPTION")
        cleanup(tbl)
        os.exit()
    end
end

local function postAll(tbl)
    if #tbl.files > 0 then
        for k, v in ipairs(tbl.files) do
            tbl.file = v
            if tbl.verbose then
                print("\n\n"..post(tbl, v))
            else
                print(post(tbl, v))
            end
            if k < #tbl.files then
                os.execute("sleep 5")
            end
        end

    elseif  #tbl.files == 0 then
        local size = 0
        local tmpfile = io.open(tbl.tmpfilename, "w")

        while true do
            local block = io.stdin:read(2^12)
            size = size + 2^12
            if not block then break end
            tmpfile:write(block)
        end

        tmpfile:close()

        if size > tbl.maxsize then
            print("Error ompluading from stdin: input exceeds " .. tbl.maxsize / 2^20 .. " megabytes (size was " .. string.format("%.2f", tonumber(size / 2^20)) .. " megabytes)")
            cleanup(tbl)
            os.exit()
        end

        tbl.file = tbl.stdin or "stdin"

        if tbl.verbose then
            print("\n\n"..post(tbl, tbl.tmpfilename))
        else
            print(post(tbl, tbl.tmpfilename))
        end
    end
end

cleanup(Omp)
addOption(Omp, false, "h", help, "help")
addOption(Omp, false, "u", urlonly, "url")
addOption(Omp, true, "f", stdindescrip, "filename")
getOptions(Omp.options)
setOptions(Omp)
postAll(Omp)
cleanup(Omp)
