#!/usr/bin/lua
local socket = require ("socket")
local ftp = require("socket.ftp")
local http = require "socket.http"
local ltn12 = require "ltn12"

Omp = {
    verbose = true,
    options = {},
    files = {},
    file = "",
    tmpfilename = "ompluad.tmp",
}
local function getOptions(tbl)
  local function resetFlags()
    for k in pairs(tbl.options) do
      tbl.options[k].on = false
    end
  end
  local cur_opt
  local args_left = #arg
  for i = 1, #arg do
    if string.match(arg[i], "^%-%-") then
      s = string.gsub(arg[i], "^%-%-", "")
      if tbl.options[s] and #s > 1 then
        tbl.options[s].on = true
        cur_opt = s
      else
        print("--"..s.." is an invalid option")
        resetFlags()
      end
    elseif string.match(arg[i], "^%-%a+") then
      for j = 1, #arg[i]-1 do
        s = string.sub(arg[i], j+1, j+1)
        if tbl.options[s] then
          tbl.options[s].on = true
          cur_opt = s
        else
          print("-"..s.." is an invalid option")
          resetFlags()
        end
      end
    elseif cur_opt then 
      table.insert(tbl.options[cur_opt].params, arg[i])
    else
      table.insert(tbl.files, arg[i])
    end
  end
end

local function setOptions(tbl)
    for k in pairs(tbl.options) do
        if tbl.options[k].on == true then
            tbl.options[k].func(tbl, tbl.options[k].params)
        end
    end
end

local function addOption(tbl, option_name, func_name, secondary_name)
  tbl.options[option_name] = {on = false, params = {}, func = func_name}
  if secondary_name and secondary_name ~= option_name then
    tbl.options[secondary_name] = {on = false, params = tbl.options[option_name].params, func = func_name}
  end
end

local function cleanup(tbl)
    os.remove(tbl.tmpfilename)
end


local function post(tbl, filename)
    local boundary = "##ThIs_iS_ThE_BoUnDaRy##"
    
    local bb = {
        '--'..boundary,
        string.format('Content-Disposition: form-data; name="file1"; filename="%s"', filename),
        'Content-Type: application/octet-stream',
        '',
        '',
    }
    local be = {
        '', 
        '--'..boundary..'--',
        ''
    }
    local file = assert(io.open(filename, "rb"))
    bb = table.concat(bb, "\r\n")
    be = table.concat(be, "\r\n")
    local size = file:seek("end")
    if size > 2^28 then 
        print("Error ompluading "..filename..": file exceeds ".. 2^28 .." bytes (size was " .. size ..")")
        os.exit()
    end
    file:seek("set")
    local head = {
        ["content-type"] = string.format('multipart/form-data; boundary=%s', boundary);
        ["content-length"] = tostring(size + #bb + #be);
        ["accept"] = "text/xml";
    }
    
    local response = {}
    local http_source = ltn12.source.cat(
        ltn12.source.string(bb),
        ltn12.source.file(file),
        ltn12.source.string(be))
    local sent = 0
    
    local function progress()
        local data = http_source()
        if tbl.verbose then
            sent = sent + #(data or "")
            local progress = sent/(size + #bb + #be) * 100;
            local hashes = string.rep("#", progress/2)
            io.write(string.format("Uploading %s: %d%%\n%s\27[1A\r", tbl.file, progress, hashes))
        end
        return data
    end
    local r,e = http.request {
        method = "POST";
        url = "http://omploader.org/upload";
        headers = head;
        source = progress;
        sink = ltn12.sink.table(response);
    }
    
--    print()

    if not r then
        return nil,tostring(e)
    end
    
    response = table.concat(response)
    local err = response:match('<err%s+type="(.*)"/>')
    if err then
        return nil,err
    end
    
    local url = response:match('View file: <a href="%w*">(http://omploader.org/%w*)</a>')
    --local url = response
    --return response
    return url
end

local function help(tbl)
    print([=[
Usage: ompluad [-h|--help] [file(s)] [options]
    -u, --url       Only output URL when finished

    You can supply a list of files OR data via stdin
]=])
cleanup(tbl)
os.exit()
end

local function urlonly(tbl)
    tbl.verbose = false
end

local function fdata(tbl, file)
    local fd = assert(io.open(file, "rb"))
    local buf = fd:read("*a")
    fd:close()
    local tmpfile = io.open(tbl.tmpfilename, "w")
    tmpfile:write(buf)
    tmpfile:close()
    tbl.file = file
end

local function postAll(tbl)
    if #tbl.files > 0 then
        for k, v in ipairs(tbl.files) do
            fdata(tbl, v)
            if tbl.verbose then
                print("\n\n"..post(tbl, tbl.tmpfilename))
            else
                print(post(tbl, tbl.tmpfilename))
            end
            if k < #tbl.files then
                os.execute("sleep 5")
            end
        end
    elseif
        #tbl.files == 0 then
        local buf = io.stdin:read("*a")
        local tmpfile = io.open(tbl.tmpfilename, "w")
        tmpfile:write(buf)
        tmpfile:close()
        tbl.file = "stdin"
        if tbl.verbose then
            print("\n"..post(tbl, tbl.tmpfilename))
        else
            print(post(tbl, tbl.tmpfilename))
        end
    end
end



addOption(Omp, "h", help, "help")
addOption(Omp, "u", urlonly, "url")
getOptions(Omp)
setOptions(Omp)
postAll(Omp)
cleanup(Omp)
